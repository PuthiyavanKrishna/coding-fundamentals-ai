from flask import Flask, request, jsonify, send_from_directory
import json
from datetime import datetime
import os
from flask_cors import CORS

app = Flask(__name__, static_folder='../../')  # Set static folder to project root
CORS(app)  # Enable CORS for all routes

# Database path
DB_PATH = os.path.join(os.path.dirname(__file__), '..', 'db', 'form_data.json')

# Initialize database if it doesn't exist
if not os.path.exists(DB_PATH):
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)  # Ensure db directory exists
    with open(DB_PATH, 'w') as f:
        json.dump([], f)

@app.route('/api/submit', methods=['POST'])
def handle_submission():
    try:
        # Get form data
        data = request.json
        query = data.get('query', '')
        
        # Add timestamp if not provided
        if 'date' not in data:
            data['date'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Add ID
        with open(DB_PATH, 'r') as f:
            entries = json.load(f)
        
        new_id = max([entry.get('id', 0) for entry in entries], default=0) + 1
        data['id'] = new_id
        
        # Save to database
        entries.append(data)
        with open(DB_PATH, 'w') as f:
            json.dump(entries, f, indent=2)
        
        # Simple AI response
        response = {
            "status": "success",
            "message": f"Received your query: {query}",
            "response": "This is a placeholder AI response. In a real application, this would be generated by an AI model."
        }
        
        return jsonify(response)
    
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/api/data', methods=['GET'])
def get_data():
    try:
        with open(DB_PATH, 'r') as f:
            data = json.load(f)
        return jsonify(data)
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/')
def serve_index():
    return send_from_directory('../../html/forms', 'ai-input-form.html')

@app.route('/<path:path>')
def serve_static(path):
    # Security check to prevent directory traversal
    if '..' in path or path.startswith('/'):
        return "Invalid path", 404
    
    try:
        return send_from_directory('../../', path)
    except:
        return "File not found", 404

if __name__ == '__main__':
    app.run(debug=True, port=5000)